/* Ch1 */
crossbow {
  display:flex;
  /* Entering no flex-direction value is the same as 
  setting it to: flex-direction: row;
  */
}

crossbow {
  display: flex;
  flex-direction: row; /* Normal aim at East */
  flex-direction: column; /* Aiming at South */
}

crossbow {
    justify-content: flex-end; /* For aiming at the end of the row */
    justify-content: flex-start; /* For aiming at the start of the row */
    justify-content: space-around; /* For elements that have space around one another */
    justify-content: space-between; /* For elements that have space between one another */
    justify-content: center; 
}

/* CH3 */

crossbow {
  display: flex;
  flex-direction: column-reverse;
  align-items: flex-start; 
}

crossbow {
  display: flex;
  flex-direction: column-reverse;
  align-items: flex-start; /* Aiming at the items on the far left */
  align-items: flex-end; /* Aiming at the items on the far right of and direction */
  align-items: stretch; /* Streaching the items along the blue lasers */
}

/* CH4 */

crossbow {
  display: flex;
  justify-content: flex-end;
  align-items: center;
}

.target:nth-of-type(2){
  align-self: flex-start; /* Targeting just one item which is closer to the upper or far right laser */
}

/* CH5 */
crossbow {
  display: flex;
  justify-content: center;
  align-items: center;
}

.target.goo{
  flex-grow: 1; /* Ratios. Setting both elements to this make them grow to fill the available space at the same rate. */
}

.target:nth-of-type(1){
  flex-grow: 1; /* Growing at a ratio of 1 */  
}

.target:nth-of-type(2){
  flex-grow: 2; /* Growing at a ratio of 2 which is faster than the first element */
}

.target:nth-of-type(2){
  flex-grow: 0; /* Not growin at all or overriding the default value */
}

/* CH6 */
crossbow{
  display: flex;
  flex-direction: row-reverse;
  align-items: flex-start;
}

.target:nth-of-type(1){
  align-self: center;
}

.target:nth-of-type(2){
  align-self: center;
  flex-grow: 1;
  flex-shrink: 0;
}

/* CH7 */
crossbow {
  display: flex;
  justify-content: center;
  align-items: center;
}

.target.goo{
  flex-basis: 400px;
  min-width: 100px; /*Down limit*/
  max-width: 100px; /*Upper limit*/
}

crossbow {
  display: flex;
  flex-direction: column; /* Now we are not looking at the width but the height */
  justify-content: center;
  align-items: center;
}

.target.goo{
  flex-basis: 300px;
}

/* CH8 */
crossbow {
  display: flex;
  justify-content: center;
  align-items: center;
}

.target.male{
  order: 2;  
}

/* CH9 */
crossbow {
  display: flex;
  flex-direction: row-reverse;
  align-items: center;
  flex-wrap: wrap; /* Wrapping to a new line because space at the old line is not available */
  /* When elements move to a new line with wrap they treat that as a completely new set of rules ex: flex-grow */
  /* Wrap first, shrink second */
}


crossbow {
  display: flex;
  align-items: flex-end; /* wrap-reverse also reverses align-items!!! */
  flex-wrap: wrap-reverse; /* Reverses the direction of the wrap, making elements wrap down instead of up */
}


crossbow {
  display: flex;
  align-items: center;
  flex-wrap: wrap;
}

.target.goo{
  flex-basis: 50%;
}

/* CH10 */
crossbow {
  display: flex;
  align-items: flex-start;
  flex-wrap: wrap;
  align-content: flex-start; /* Aligning content that is wrapped */
  /* Most of the same properties can be applied here aswell */
}

/* CH11 */

crossbow {
  display: flex;
  align-items: center;
}

.target:nth-of-type(1){
  flex: 1 0 auto;
  /* Shorthand for grow, shrink and basis */
}


crossbow {
  display: flex;
  align-items: center;
  flex-flow: column wrap;
  /* Shorthand for flex-direction and flex-wrap */
}
